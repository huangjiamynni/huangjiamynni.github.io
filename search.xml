<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>async与await</title>
      <link href="/2020/07/07/async%E4%B8%8Eawait/"/>
      <url>/2020/07/07/async%E4%B8%8Eawait/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>简单版Promise封装</title>
      <link href="/2020/07/07/%E7%AE%80%E5%8D%95%E7%89%88Promise%E5%B0%81%E8%A3%85/"/>
      <url>/2020/07/07/%E7%AE%80%E5%8D%95%E7%89%88Promise%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="函数作为参数传给函数"><a href="#函数作为参数传给函数" class="headerlink" title="函数作为参数传给函数"></a>函数作为参数传给函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pro</span>(<span class="params">fn</span>)</span>&#123;<span class="comment">//1首先声明了一个pro函数,pro函数接收一个函数作为参数</span></span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">100</span></span><br><span class="line">    fn(value)<span class="comment">//3然后再Pro里面执行了传递过来的函数，并且给此函数传递了一个参数，这样就可以在Pro执行的时候拿到里面的数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Pro(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="comment">//2然后我们执行pro函数，传递给它一个匿名函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"fn执行了"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"value是:"</span>+value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>首先声明了一个pro函数,pro函数接收一个函数作为参数</li><li>然后我们执行pro函数，传递给它一个匿名函数</li><li>然后再Pro里面执行了传递过来的函数，并且给此函数传递了一个参数，这样就可以在Pro执行的时候拿到里面的数据</li></ol><h3 id="构造函数版本"><a href="#构造函数版本" class="headerlink" title="构造函数版本"></a>构造函数版本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pro</span>(<span class="params">fn</span>) </span>&#123;<span class="comment">//1首先声明了一个pro构造函数,pro构造函数接收一个函数作为参数</span></span><br><span class="line">    <span class="keyword">this</span>.init(fn)<span class="comment">//3.初始化</span></span><br><span class="line">&#125;</span><br><span class="line">Pro.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Pro,</span><br><span class="line">    init(fn) &#123;</span><br><span class="line">        fn(<span class="number">5000</span>)<span class="comment">//4执行实例化传递过来的fn方法并且穿一个实参5000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Pro(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;<span class="comment">//2实例化Pro传递一个函数作为参数</span></span><br><span class="line">    <span class="comment">//假设我们现在需要在这里拿到res的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="加入异步操作"><a href="#加入异步操作" class="headerlink" title="加入异步操作"></a>加入异步操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pro</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.init(fn)</span><br><span class="line">&#125;</span><br><span class="line">Pro.prototype=&#123;</span><br><span class="line">    <span class="keyword">constructor</span>:Pro,</span><br><span class="line">    init(fn)&#123;</span><br><span class="line">        fn(<span class="keyword">this</span>.res)<span class="comment">//4.改变执行时的传惨，把res方法传递给实例化对象</span></span><br><span class="line">    &#125;,</span><br><span class="line">    res(value)&#123;<span class="comment">//3.定义一个res方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Pro(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//1.改写为异步操作并且执行res,那么这次的res就不是数值，也是一个函数了</span></span><br><span class="line">        <span class="keyword">var</span> vlue = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">500</span>)</span><br><span class="line">        res(vlue)<span class="comment">//2.我们现在执行这个函数，这样就可以在异步里面拿到这个参数</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>现在我们需要在构造函数里拿到异步操作之后的值，假设setTimeout是一个网络请求，value是网网络请求之后的结果</li><li>此时的res就是构造函数的res,我们在初始化的时候执行fn方法,然后把res方法作为参数传递给实例化对象的函数的参数了。</li><li>然后执行res方法,把vlaue传递给构造函数，此时就可以在构造函数里面的res方法里拿到value的值了</li></ol><h3 id="用-then来实现链式调用"><a href="#用-then来实现链式调用" class="headerlink" title="用.then来实现链式调用"></a>用.then来实现链式调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pro</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.init(fn)</span><br><span class="line">&#125;</span><br><span class="line">Pro.prototype=&#123;</span><br><span class="line">    <span class="keyword">constructor</span>:Pro,</span><br><span class="line">    fns:[],</span><br><span class="line">    init(fn)&#123;</span><br><span class="line">        fn(<span class="keyword">this</span>.res.bind(<span class="keyword">this</span>))</span><br><span class="line">    &#125;,</span><br><span class="line">    res(value)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fns.forEach(<span class="function"><span class="params">fns</span>=&gt;</span>fns(value))</span><br><span class="line">    &#125;,</span><br><span class="line">    then(res)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fns.push(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Pro(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> vlue = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">500</span>)</span><br><span class="line">        res(vlue)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>.then接收的也是一个函数，但是我们是异步执行的，所以每次.then的时候用一个数组把传递过去的方法存起来，然后在res执行的时候执行传递过去的.then方法并且把vlaue传过去。这样就实现了链式调用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-axios跨域请求方法</title>
      <link href="/2020/06/15/vue-axios%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/"/>
      <url>/2020/06/15/vue-axios%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-axios跨域"><a href="#vue-axios跨域" class="headerlink" title="vue-axios跨域"></a>vue-axios跨域</h1><ul><li><p>基本环境</p><ul><li><p>*”axios”*: “^0.19.2”,</p></li><li><p>*”body-parser”*: “^1.19.0”,</p></li><li><p>*”cookie-parser”*: “^1.4.5”,</p></li><li><p>*”echarts”*: “^4.8.0”,</p></li><li><p>*”element-ui”*: “^2.13.2”,</p></li><li><p>*”express”*: “^4.17.1”,</p></li><li><p>*”multer”*: “^1.4.2”,</p></li><li><p>*”vue”*: “^2.5.2”,</p></li><li><p>*”vue-axios”*: “^2.1.5”,</p></li><li><p>*”vue-router”*: “^3.0.1”  </p></li></ul></li><li><p>示例接口：</p><ul><li>本地端口：<code>http://localhost:8083/</code></li><li>跨域端口：<code>https://iflow-api.uc.cn/feiyan/special</code>（此接口是新冠病毒数据接口地址）</li></ul></li><li><p>解决方案</p><ol><li><p>第一步来到 <code>main.js</code> 中，加入以下配置项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> ajax <span class="keyword">from</span> <span class="string">'@/request/ajax'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span>;</span><br><span class="line">Vue.prototype.$ajax = ajax</span><br><span class="line"></span><br><span class="line"><span class="comment">//跨域配置,此地的ajax只是一个命名,实际上是自己做过修改的axios</span></span><br><span class="line">ajax.defaults.baseURL = <span class="string">'/api'</span></span><br><span class="line">ajax.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/json'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.prototype.$echarts = echarts;</span><br><span class="line">Vue.use(ElementUI, &#123;</span><br><span class="line">  size: <span class="string">'medium'</span>,</span><br><span class="line">  zIndex: <span class="number">2000</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li><p>配置 <code>config</code> 文件下的 <code>index.js</code> ，找到 <code>proxyTable</code> 在此对象中加入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'/api'</span>: &#123;</span><br><span class="line">       target:<span class="string">'https://iflow-api.uc.cn/feiyan'</span>, <span class="comment">// 你请求的第三方接口</span></span><br><span class="line">       changeOrigin:<span class="literal">true</span>, <span class="comment">// 在本地会创建一个虚拟服务端，然后发送请求的数据，并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题</span></span><br><span class="line">       pathRewrite:&#123;  <span class="comment">// 路径重写，</span></span><br><span class="line">         <span class="string">'^/api'</span>: <span class="string">''</span>  <span class="comment">// 替换target中的请求地址，也就是说以后你在请求`https://iflow-api.uc.cn/feiyan/XXXXX这个地址的时候直接写成/xxxx即可。</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li><li><p>请求示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本来请求地址是https://iflow-api.uc.cn/feiyan/special,现在只用写/special</span></span><br><span class="line"><span class="keyword">this</span>.$ajax.get(<span class="string">'/special'</span>,&#123;</span><br><span class="line">        <span class="string">'uc_param_str'</span>: <span class="string">'pccplomi'</span>,</span><br><span class="line">        <span class="string">'feiyan'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'district'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'tabStart'</span>: <span class="string">'0'</span>,</span><br><span class="line">        <span class="string">'tabEnd'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'tabBrief'</span>:<span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'aid'</span>: <span class="string">'3804775841868884355'</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;<span class="comment">//处理数据</span></span><br><span class="line">        <span class="keyword">this</span>.list = res.data.data.feiyan.provinces.map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Object</span>.assign(item,&#123;<span class="attr">sum</span>:item.sure_cnt-item.die_cnt-item.cure_cnt&#125;)</span><br><span class="line">        &#125;).sort(<span class="function">(<span class="params">item,item2</span>)=&gt;</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> item2.sure_cnt-item.sure_cnt</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></li></ol><p>   然后执行请求可以看到本来是<code>https://iflow-api.uc.cn/feiyan/special</code>的现在变成了<code>http://localhost:8083/api/special</code> 也就是说经过这个配置 api替换了config文件下</p><p>   index.js中target值的地址去开启一个代理，然后访问此路径下的所有接口都只用从<code>https://iflow-api.uc.cn/feiyan/special</code>之后开使写就行了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>npm常用方式</title>
      <link href="/2020/06/13/npm%E5%B8%B8%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/06/13/npm%E5%B8%B8%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="npm使用方式"><a href="#npm使用方式" class="headerlink" title="npm使用方式"></a>npm使用方式</h1><h3 id="1-npm常用命令"><a href="#1-npm常用命令" class="headerlink" title="1.npm常用命令"></a>1.npm常用命令</h3><ul><li><p>npm init</p><ul><li>npm init -y  //可以跳过向导，快速生成 </li></ul></li><li><p>npm install</p><ul><li>npm install //一次性把 dependencies选项中的依赖全部安装</li><li>npm install 包名</li><li>npm install 包名 –save //下载并且保存依赖</li><li>简写:npm i 包名 -S 或者npm i  -S 包名</li></ul></li><li><p>npm uninstall 包名</p><ul><li>只删除，如果有依赖项依然会保存</li></ul></li><li><p>npm uninstall –save 包名</p><ul><li>删除同时把依赖信息也去除</li><li>简写：npm un -S 包名</li></ul></li><li><p>npm help</p><ul><li>npm install help //查看install使用帮助</li></ul></li></ul><h3 id="解决-npm-被墙的问题"><a href="#解决-npm-被墙的问题" class="headerlink" title="解决 npm 被墙的问题"></a>解决 npm 被墙的问题</h3><p>npm 的存储包放在国外，有时候会被墙，所以下载速度很慢，可以下载 cnpm解决</p><p>安装淘宝的cnpm(在任意目录下都可以):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><p>接下来你安装包的时候把之前的 <code>npm</code> 替换成 <code>cnpm</code></p><p>使用案例，比如安装jquery：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i jquery</span><br><span class="line"><span class="comment">//变为</span></span><br><span class="line">cnpm i jquery</span><br></pre></td></tr></table></figure><p>如果不想安装 <code>cnpm</code> 又想使用淘宝的服务器来下载:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><p>但是每次都这样手动去加很麻烦，我们可以把这个选项加入配置文件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>安装完成之后使用 <code>npm config list</code>  查看配置信息，成功后你使用所有的 <code>npm install</code> 都会使用淘宝的服务器来下载。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

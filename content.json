{"meta":{"title":"伊萨格","subtitle":"","description":"","author":"yisage","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"async与await","slug":"async与await","date":"2020-07-07T07:22:21.101Z","updated":"2020-07-07T07:22:21.101Z","comments":true,"path":"2020/07/07/async与await/","link":"","permalink":"http://yoursite.com/2020/07/07/async%E4%B8%8Eawait/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"简单版Promise封装","slug":"简单版Promise封装","date":"2020-07-07T06:37:48.729Z","updated":"2020-07-07T06:43:40.362Z","comments":true,"path":"2020/07/07/简单版Promise封装/","link":"","permalink":"http://yoursite.com/2020/07/07/%E7%AE%80%E5%8D%95%E7%89%88Promise%E5%B0%81%E8%A3%85/","excerpt":"","text":"函数作为参数传给函数123456789function Pro(fn)&#123;//1首先声明了一个pro函数,pro函数接收一个函数作为参数 var value = 100 fn(value)//3然后再Pro里面执行了传递过来的函数，并且给此函数传递了一个参数，这样就可以在Pro执行的时候拿到里面的数据&#125;Pro(function(value)&#123;//2然后我们执行pro函数，传递给它一个匿名函数 console.log(\"fn执行了\") console.log(\"value是:\"+value)&#125;) 首先声明了一个pro函数,pro函数接收一个函数作为参数 然后我们执行pro函数，传递给它一个匿名函数 然后再Pro里面执行了传递过来的函数，并且给此函数传递了一个参数，这样就可以在Pro执行的时候拿到里面的数据 构造函数版本12345678910111213function Pro(fn) &#123;//1首先声明了一个pro构造函数,pro构造函数接收一个函数作为参数 this.init(fn)//3.初始化&#125;Pro.prototype = &#123; constructor: Pro, init(fn) &#123; fn(5000)//4执行实例化传递过来的fn方法并且穿一个实参5000 &#125;&#125;let p = new Pro(function (res) &#123;//2实例化Pro传递一个函数作为参数 //假设我们现在需要在这里拿到res的值 console.log(res)&#125;) 加入异步操作123456789101112131415161718function Pro(fn)&#123; this.init(fn)&#125;Pro.prototype=&#123; constructor:Pro, init(fn)&#123; fn(this.res)//4.改变执行时的传惨，把res方法传递给实例化对象 &#125;, res(value)&#123;//3.定义一个res方法 console.log(value) &#125;&#125;let p = new Pro(function(res)&#123; setTimeout(function()&#123;//1.改写为异步操作并且执行res,那么这次的res就不是数值，也是一个函数了 var vlue = parseInt(Math.random()*500) res(vlue)//2.我们现在执行这个函数，这样就可以在异步里面拿到这个参数 &#125;,1000)&#125;) 现在我们需要在构造函数里拿到异步操作之后的值，假设setTimeout是一个网络请求，value是网网络请求之后的结果 此时的res就是构造函数的res,我们在初始化的时候执行fn方法,然后把res方法作为参数传递给实例化对象的函数的参数了。 然后执行res方法,把vlaue传递给构造函数，此时就可以在构造函数里面的res方法里拿到value的值了 用.then来实现链式调用123456789101112131415161718192021222324function Pro(fn)&#123; this.init(fn)&#125;Pro.prototype=&#123; constructor:Pro, fns:[], init(fn)&#123; fn(this.res.bind(this)) &#125;, res(value)&#123; this.fns.forEach(fns=&gt;fns(value)) &#125;, then(res)&#123; this.fns.push(res) &#125;&#125;let p = new Pro(function(res)&#123; setTimeout(function()&#123; var vlue = parseInt(Math.random()*500) res(vlue) &#125;,1000)&#125;).then(res=&gt;&#123; console.log(res)&#125;) .then接收的也是一个函数，但是我们是异步执行的，所以每次.then的时候用一个数组把传递过去的方法存起来，然后在res执行的时候执行传递过去的.then方法并且把vlaue传过去。这样就实现了链式调用。","categories":[],"tags":[]},{"title":"vue-axios跨域请求方法","slug":"vue-axios跨域请求方法","date":"2020-06-15T09:51:27.875Z","updated":"2020-06-15T15:05:23.663Z","comments":true,"path":"2020/06/15/vue-axios跨域请求方法/","link":"","permalink":"http://yoursite.com/2020/06/15/vue-axios%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/","excerpt":"","text":"vue-axios跨域 基本环境 *”axios”*: “^0.19.2”, *”body-parser”*: “^1.19.0”, *”cookie-parser”*: “^1.4.5”, *”echarts”*: “^4.8.0”, *”element-ui”*: “^2.13.2”, *”express”*: “^4.17.1”, *”multer”*: “^1.4.2”, *”vue”*: “^2.5.2”, *”vue-axios”*: “^2.1.5”, *”vue-router”*: “^3.0.1” 示例接口： 本地端口：http://localhost:8083/ 跨域端口：https://iflow-api.uc.cn/feiyan/special（此接口是新冠病毒数据接口地址） 解决方案 第一步来到 main.js 中，加入以下配置项： 1234567891011121314151617181920212223242526import Vue from 'vue'import App from './App'import router from './router'import ElementUI from 'element-ui';import ajax from '@/request/ajax'import 'element-ui/lib/theme-chalk/index.css';import echarts from 'echarts';Vue.prototype.$ajax = ajax//跨域配置,此地的ajax只是一个命名,实际上是自己做过修改的axiosajax.defaults.baseURL = '/api'ajax.defaults.headers.post['Content-Type'] = 'application/json';Vue.config.productionTip = falseVue.prototype.$echarts = echarts;Vue.use(ElementUI, &#123; size: 'medium', zIndex: 2000&#125;);/* eslint-disable no-new */new Vue(&#123; el: '#app', router, render: h =&gt; h(App)&#125;) 配置 config 文件下的 index.js ，找到 proxyTable 在此对象中加入以下代码： 123456'/api': &#123; target:'https://iflow-api.uc.cn/feiyan', // 你请求的第三方接口 changeOrigin:true, // 在本地会创建一个虚拟服务端，然后发送请求的数据，并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题 pathRewrite:&#123; // 路径重写， '^/api': '' // 替换target中的请求地址，也就是说以后你在请求`https://iflow-api.uc.cn/feiyan/XXXXX这个地址的时候直接写成/xxxx即可。 &#125; 请求示例： 12345678910111213141516//本来请求地址是https://iflow-api.uc.cn/feiyan/special,现在只用写/specialthis.$ajax.get('/special',&#123; 'uc_param_str': 'pccplomi', 'feiyan': '1', 'district': '1', 'tabStart': '0', 'tabEnd': '1', 'tabBrief':'1', 'aid': '3804775841868884355' &#125;).then(res=&gt;&#123;//处理数据 this.list = res.data.data.feiyan.provinces.map(item=&gt;&#123; return Object.assign(item,&#123;sum:item.sure_cnt-item.die_cnt-item.cure_cnt&#125;) &#125;).sort((item,item2)=&gt;&#123; return item2.sure_cnt-item.sure_cnt &#125;) &#125;) 然后执行请求可以看到本来是https://iflow-api.uc.cn/feiyan/special的现在变成了http://localhost:8083/api/special 也就是说经过这个配置 api替换了config文件下 index.js中target值的地址去开启一个代理，然后访问此路径下的所有接口都只用从https://iflow-api.uc.cn/feiyan/special之后开使写就行了。","categories":[],"tags":[]},{"title":"npm常用方式","slug":"npm常用方式","date":"2020-06-13T10:32:07.732Z","updated":"2020-06-13T10:31:45.375Z","comments":true,"path":"2020/06/13/npm常用方式/","link":"","permalink":"http://yoursite.com/2020/06/13/npm%E5%B8%B8%E7%94%A8%E6%96%B9%E5%BC%8F/","excerpt":"","text":"npm使用方式1.npm常用命令 npm init npm init -y //可以跳过向导，快速生成 npm install npm install //一次性把 dependencies选项中的依赖全部安装 npm install 包名 npm install 包名 –save //下载并且保存依赖 简写:npm i 包名 -S 或者npm i -S 包名 npm uninstall 包名 只删除，如果有依赖项依然会保存 npm uninstall –save 包名 删除同时把依赖信息也去除 简写：npm un -S 包名 npm help npm install help //查看install使用帮助 解决 npm 被墙的问题npm 的存储包放在国外，有时候会被墙，所以下载速度很慢，可以下载 cnpm解决 安装淘宝的cnpm(在任意目录下都可以): 1npm install -g cnpm --registry=https://registry.npm.taobao.org 接下来你安装包的时候把之前的 npm 替换成 cnpm 使用案例，比如安装jquery： 123npm i jquery//变为cnpm i jquery 如果不想安装 cnpm 又想使用淘宝的服务器来下载: 1npm install jquery --registry=https://registry.npm.taobao.org 但是每次都这样手动去加很麻烦，我们可以把这个选项加入配置文件中： 1npm config set registry=https://registry.npm.taobao.org 安装完成之后使用 npm config list 查看配置信息，成功后你使用所有的 npm install 都会使用淘宝的服务器来下载。","categories":[],"tags":[]}],"categories":[],"tags":[]}